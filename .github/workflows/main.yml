# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 
          
      - name: Install dependencies and generate lock file
        run: |
          cd web-server
          npm install
          # Ensure the lock file is generated and committed to the Docker context
          git add package-lock.json
          git commit -m "Add package-lock.json generated by workflow" || echo "Lock file already exists"
          cd ..

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Services with Docker Compose
        run: |
          docker-compose up -d

      - name: Wait for Services
        run: |
          # Wait for RTMP Server
          timeout 60s bash -c 'until curl -s http://localhost:8080/health; do sleep 5; done'
          # Wait for API Router
          timeout 60s bash -c 'until curl -s http://localhost:8000/health; do sleep 5; done'



      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r device-manager/requirements.txt
          pip install -r tests/requirements-test.txt
          cd api-router && go mod download
          cd ../web-server && npm install

      - name: Run tests
        run: |
          pytest tests/
          cd api-router && go test ./...
          cd ../web-server && npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push RTMP server
        uses: docker/build-push-action@v4
        with:
          context: ./rtmp-server
          push: true
          tags: cdaprod/rtmp-server:latest

      - name: Build and push Device Manager
        uses: docker/build-push-action@v4
        with:
          context: ./device-manager
          push: true
          tags: cdaprod/device-manager:latest

      - name: Build and push API Router
        uses: docker/build-push-action@v4
        with:
          context: ./api-router
          push: true
          tags: cdaprod/api-router:latest

      - name: Build and push Web Server
        uses: docker/build-push-action@v4
        with:
          context: ./web-server
          push: true
          tags: cdaprod/web-server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          # Add your deployment commands

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r device-manager/requirements.txt
          pip install -r tests/requirements-test.txt
          cd api-router && go mod download
          cd ../web-server && npm install

      # - name: Run tests
      #   run: |
      #     pytest tests/
      #     cd api-router && go test ./...
      #     cd ../web-server && npm test